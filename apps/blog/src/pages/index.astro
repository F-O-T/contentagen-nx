---
export const prerender = true;
import { sdk, agentId } from "../contentagen";
import BaseHead from "../components/BaseHead.astro";
import Navbar from "../components/Navbar.astro";
import Footer from "../components/Footer.astro";
import FormattedDate from "../components/FormattedDate.astro";
import { SITE_DESCRIPTION, SITE_TITLE } from "../consts";
import { Image } from "astro:assets";
import { Button } from "@packages/ui/components/button";

const url = new URL(Astro.request.url);
const currentPage = parseInt(url.searchParams.get("page") || "1");
const postsPerPage = 5;

const response = await sdk.listContentByAgent({
   agentId: [agentId],
   status: ["approved"],
   limit: postsPerPage,
   page: currentPage,
});
const posts = response.posts.sort(
   (a, b) => new Date(b.createdAt).valueOf() - new Date(a.createdAt).valueOf(),
);
const totalPosts = response.total;
const totalPages = Math.ceil(totalPosts / postsPerPage);
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Navbar />
		<main class="max-w-4xl mx-auto px-4 py-12">
			<section>
				<ul class="grid gap-8 md:grid-cols-2 list-none m-0 p-0">
					{
						posts.map((post, index) => (
							<li
								class={index === 0 ? "md:col-span-2 text-center" : ""}
							>
<a href={`/${post.meta.slug}/`} class="block">
  <Image
    width={720}
    height={360}
    src={post.imageUrl ?? ""}
    alt={post.meta?.title ?? ""}
    class="w-full rounded-xl mb-3 transition-shadow hover:shadow-lg aspect-video object-cover"
    format="webp"
    loading="lazy"
  />
  <h4
    class={`text-xl font-semibold leading-snug text-gray-900 dark:text-gray-100 transition-colors ${index === 0 ? "md:text-4xl" : ""}`}
  >
    {post.meta?.title ?? ""}
  </h4>
  <p class="text-sm text-gray-500">
    <FormattedDate date={ new Date(post.createdAt)} />
  </p>
</a>
							</li>
						))
					}
				</ul>
			</section>

			<!-- Pagination -->
			{totalPages > 1 && (
				<section class="mt-12 flex justify-center">
					<nav class="flex items-center space-x-2">
						{currentPage > 1 && (
							<a href={`/?page=${currentPage - 1}`}>
								<Button variant="outline" size="sm">
									Previous
								</Button>
							</a>
						)}

						{Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
							const pageNum = Math.max(1, Math.min(totalPages - 4, currentPage - 2)) + i;
							if (pageNum > totalPages) return null;
							return (
								<a href={`/?page=${pageNum}`}>
									<Button
										variant={pageNum === currentPage ? "default" : "outline"}
										size="sm"
									>
										{pageNum}
									</Button>
								</a>
							);
						})}

						{currentPage < totalPages && (
							<a href={`/?page=${currentPage + 1}`}>
								<Button variant="outline" size="sm">
									Next
								</Button>
							</a>
						)}
					</nav>
				</section>
			)}
		</main>
		<Footer />
	</body>
</html>
