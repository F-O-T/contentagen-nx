---
export const prerender = true;
import { sdk, agentId } from "../contentagen";
import BlogPost from "../layouts/BlogPost.astro";

export async function getStaticPaths() {
   async function getRelatedPosts(currentSlug: string) {
      const relatedSlugs = await sdk.getRelatedSlugs({
         slug: currentSlug,
         agentId,
      });

      const relatedPosts = [];
      for (const slug of relatedSlugs.slice(0, 3)) {
         try {
            const relatedPost = await sdk.getContentBySlug({
               slug,
               agentId,
            });
            if (relatedPost.status === "approved") {
               relatedPosts.push(relatedPost);
            }
         } catch (error) {
            console.error(`Error fetching related post ${slug}:`, error);
         }
      }
      return relatedPosts;
   }

   // First get the list of approved posts (without full content)
   const response = await sdk.listContentByAgent({
      agentId: [agentId],
      status: ["approved"],
   });
   const author = await sdk.getAuthorByAgentId({ agentId });

   // Fetch full content for each post and related posts in parallel
   const postsWithRelated = await Promise.all(
      response.posts.map(async (postMeta) => {
         // Get the full post content by slug
         const fullPost = await sdk.getContentBySlug({
            slug: postMeta.meta.slug,
            agentId,
         });

         const relatedPosts = await getRelatedPosts(postMeta.meta.slug);
         return {
            params: { slug: postMeta.meta.slug },
            props: {
               post: fullPost,
               author,
               relatedPosts,
            },
         };
      }),
   );

   return postsWithRelated;
}

const { post, author, relatedPosts } = Astro.props;
---

<BlogPost post={post} author={author} relatedPosts={relatedPosts}  />
