// apps/dashboard/src/pages/agent-details/ui/agent-ideas-card.tsx

import {
   Card,
   CardHeader,
   CardTitle,
   CardContent,
   CardFooter,
   CardDescription,
} from "@packages/ui/components/card";
import { useSuspenseQuery } from "@tanstack/react-query";
import { useTRPC } from "@/integrations/clients";
import { useParams } from "@tanstack/react-router";
import { useState, Suspense } from "react";
import { Button } from "@packages/ui/components/button";
import { ChevronLeft, ChevronRight, Tags } from "lucide-react";
import { Badge } from "@packages/ui/components/badge";
import { InfoItem } from "@packages/ui/components/info-item";
import { Skeleton } from "@packages/ui/components/skeleton";

export function AgentIdeasCard() {
   const { agentId } = useParams({
      from: "/_dashboard/agents/$agentId/",
      select: ({ agentId }) => ({ agentId }),
   });

   const [currentPage, setCurrentPage] = useState(1);
   const [pageSize] = useState(6);
   const Fallback = () => (
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
         {Array.from({ length: pageSize }).map((_, i) => (
            <Skeleton key={`skeleton-${i + 1}`} className="w-full h-48" />
         ))}
      </div>
   );
   return (
      <Card className="w-full">
         <CardHeader>
            <CardTitle>Agent Ideas</CardTitle>
            <CardDescription>Ideas generated by this agent</CardDescription>
         </CardHeader>

         <CardContent className="space-y-4 grid">
            <Suspense fallback={<Fallback />}>
               <IdeasList
                  agentId={agentId}
                  currentPage={currentPage}
                  setCurrentPage={setCurrentPage}
                  pageSize={pageSize}
               />
            </Suspense>
         </CardContent>
      </Card>
   );
}
function IdeasList({
   agentId,
   currentPage,
   setCurrentPage,
   pageSize,
}: {
   agentId: string;
   currentPage: number;
   setCurrentPage: (v: number | ((n: number) => number)) => void;
   pageSize: number;
}) {
   const trpc = useTRPC();
   const { data: ideasData } = useSuspenseQuery(
      trpc.ideas.listByAgentPaginated.queryOptions({
         agentId: agentId,
         page: currentPage,
         limit: pageSize,
      }),
   );

   const { items: paginatedIdeas, total: totalIdeas } = ideasData;
   const totalPages = Math.ceil(totalIdeas / pageSize);

   return (
      <>
         {paginatedIdeas.length === 0 ? (
            <p className="text-muted-foreground text-center py-4">
               No ideas generated yet
            </p>
         ) : (
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
               {paginatedIdeas.map((idea) => (
                  <Card key={idea.id}>
                     <CardHeader>
                        <CardTitle className="line-clamp-1">
                           {idea.content}
                        </CardTitle>
                     </CardHeader>

                     <CardContent className="wrap">
                        <InfoItem
                           icon={<Tags className="h-4 w-4" />}
                           label="Tags"
                           value={
                              idea.meta?.tags?.length
                                 ? idea.meta.tags
                                      .map((t: string) => `- ${t}`)
                                      .join("\n")
                                 : ""
                           }
                        />
                     </CardContent>
                     <CardFooter className="flex items-center justify-between text-xs text-muted-foreground">
                        <span className="text-xs">
                           {new Date(idea.createdAt).toLocaleDateString()}
                        </span>
                        <Badge variant="outline">{idea.status}</Badge>
                     </CardFooter>
                  </Card>
               ))}
            </div>
         )}

         {totalPages > 1 && (
            <CardFooter className="flex items-center justify-between w-full">
               <Button
                  variant="outline"
                  size="sm"
                  onClick={() =>
                     setCurrentPage((prev) => Math.max(1, prev - 1))
                  }
                  disabled={currentPage === 1}
               >
                  <ChevronLeft className="w-4 h-4" />
                  Previous
               </Button>

               <span className="text-sm text-muted-foreground">
                  Page {currentPage} of {totalPages}
               </span>

               <Button
                  variant="outline"
                  size="sm"
                  onClick={() =>
                     setCurrentPage((prev) => Math.min(totalPages, prev + 1))
                  }
                  disabled={currentPage === totalPages}
               >
                  Next
                  <ChevronRight className="w-4 h-4" />
               </Button>
            </CardFooter>
         )}
      </>
   );
}
