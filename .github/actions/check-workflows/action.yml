name: "Check Workflows and Comment"
description: "Posts a comment when a workflow fails and ensures the PR is converted to draft (REST + GraphQL fallback)"
inputs:
  workflow_name:
    description: "Name of the workflow that failed"
    required: true
  command:
    description: "Command to run locally to fix the issues"
    required: true
  should_fail:
    description: "Whether to fail the job (use at workflow level)"
    required: false
    default: "true"
  github_token:
    description: "Token to use for GitHub API calls (pass a secret from the calling workflow)"
    required: true
runs:
  using: "composite"
  steps:
    - name: Comment and convert PR to draft
      id: comment_and_draft
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const { owner, repo } = context.repo;
          const payloadPr = context.payload && context.payload.pull_request ? context.payload.pull_request : undefined;
          const prNumber = context.issue && context.issue.number
            ? context.issue.number
            : payloadPr && payloadPr.number
              ? payloadPr.number
              : undefined;

          if (!prNumber) return;

          if (process.env.JOB_STATUS !== 'failure') return;

          const body = [
            `## ‚ùå ${process.env.WORKFLOW_NAME} Failed`,
            '',
            'The workflow failed. Please run the following locally and fix all issues.',
            '',
            '```bash',
            process.env.COMMAND,
            '```',
            '',
            'Make sure all checks pass locally before marking the PR as "Ready for review".'
          ].join('\n');

          // Create comment
          await github.rest.issues.createComment({ owner, repo, issue_number: prNumber, body });

          // Get PR
          const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });

          // If already draft, nothing to do
          if (pr.draft) return;

          // Try REST update first
          try {
            const res = await github.rest.pulls.update({ owner, repo, pull_number: prNumber, draft: true });
            if (res && res.data && res.data.draft === true) {
              console.log('PR converted to draft via REST.');
              return;
            }
          } catch (e) {
            // fall through to GraphQL fallback
            console.log('REST update failed or did not set draft; attempting GraphQL fallback.');
          }

          // GraphQL fallback
          if (pr.node_id) {
            const mutation = `
              mutation ConvertToDraft($id: ID!) {
                convertPullRequestToDraft(input: { pullRequestId: $id }) {
                  pullRequest {
                    number
                    isDraft
                  }
                }
              }
            `;
            const gqlRes = await github.graphql(mutation, { id: pr.node_id });
            const converted = gqlRes && gqlRes.convertPullRequestToDraft && gqlRes.convertPullRequestToDraft.pullRequest && gqlRes.convertPullRequestToDraft.pullRequest.isDraft;
            if (converted === true) {
              console.log('PR converted to draft via GraphQL.');
              return;
            }
          }

          console.log('Unable to mark PR as draft via REST or GraphQL.');
      env:
        WORKFLOW_NAME: ${{ inputs.workflow_name }}
        COMMAND: ${{ inputs.command }}
        JOB_STATUS: ${{ job.status }}

    - name: Optionally fail the job
      shell: bash
      run: |
        if [ "${{ inputs.should_fail }}" = "true" ] && [ "${{ job.status }}" = "failure" ]; then
          exit 1
        fi
