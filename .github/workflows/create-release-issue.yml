name: Create Release Issue

on:
  pull_request:
    types: [closed]
    branches: [main, master]

jobs:
  create-release-issue:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get merged PR details
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const prNumber = pr.number;
            const prTitle = pr.title;
            const prBody = pr.body || '';
            const author = pr.user.login;
            const mergedAt = pr.merged_at;

            // Get commits in this PR
            const commits = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            // Categorize commits
            const categories = {
              features: [],
              fixes: [],
              docs: [],
              refactor: [],
              test: [],
              chore: [],
              other: []
            };

            commits.data.forEach(commit => {
              const message = commit.commit.message.toLowerCase();
              if (message.includes('feat') || message.includes('feature') || message.includes('add')) {
                categories.features.push(commit.commit.message);
              } else if (message.includes('fix') || message.includes('bug')) {
                categories.fixes.push(commit.commit.message);
              } else if (message.includes('docs') || message.includes('documentation')) {
                categories.docs.push(commit.commit.message);
              } else if (message.includes('refactor') || message.includes('refactor')) {
                categories.refactor.push(commit.commit.message);
              } else if (message.includes('test')) {
                categories.test.push(commit.commit.message);
              } else if (message.includes('chore')) {
                categories.chore.push(commit.commit.message);
              } else {
                categories.other.push(commit.commit.message);
              }
            });

            return {
              prNumber,
              prTitle,
              prBody,
              author,
              mergedAt,
              categories,
              commitCount: commits.data.length
            };

      - name: Create release tracking issue
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const details = ${{ steps.pr-details.outputs.result }};

            // Check if a release issue already exists for this week
            const now = new Date();
            const weekStart = new Date(now.setDate(now.getDate() - now.getDay()));
            const weekKey = weekStart.toISOString().split('T')[0];

            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['release', 'automated'],
              state: 'open',
              since: weekStart.toISOString()
            });

            let targetIssue;
            if (existingIssues.data.length > 0) {
              targetIssue = existingIssues.data[0];
            } else {
              // Create new release issue
              const releaseIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚀 Release ${weekKey} - Weekly Summary`,
                body: `## 📋 Release Summary for ${weekKey}

                ### 📊 Overview
                - **Status:** In Progress
                - **Target Release Date:** ${new Date(weekStart.getTime() + 6 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]}

                ### 🔄 Merged Pull Requests
                <!-- PRs will be added here automatically -->

                ### ✅ Release Checklist
                - [ ] All tests passing
                - [ ] Documentation updated
                - [ ] Dependencies reviewed
                - [ ] Security scan completed
                - [ ] Performance check done
                - [ ] Deployment tested

                ### 📝 Release Notes
                <!-- Release notes will be compiled here -->

                ---
                *This issue was automatically created by GitHub Actions.*
                `,
                labels: ['release', 'automated', 'weekly']
              });
              targetIssue = releaseIssue.data;
            }

            // Add PR to the release issue
            const currentBody = targetIssue.body;
            const prSection = currentBody.includes('### 🔄 Merged Pull Requests') ?
              currentBody.replace('<!-- PRs will be added here automatically -->',
                `<!-- PRs will be added here automatically -->\n- #${details.prNumber}: ${details.prTitle} (@${details.author})`) :
              currentBody;

            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: targetIssue.number,
              body: prSection
            });

            // Add comment to the original PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: `✅ This PR has been added to the release tracking issue: #${targetIssue.number}`
            });