name: PR Comment & Convert to Draft on Typecheck Failure

on:
  workflow_run:
    workflows:
      - "Typecheck"
      - "Tests" 
      - "Biome Check"
    types:
      - completed
  workflow_dispatch:
    inputs:
      pr_number:
        description: '(for manual testing) PR number to act on'
        required: false
        type: number

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  comment-and-draft:
    if: ${{ (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'failure') || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Comment on PR and ensure draft
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Determine PR number
            let prNumber = undefined;
            if (context.eventName === 'workflow_dispatch') {
              prNumber = parseInt(process.env.INPUT_PR_NUMBER || '', 10) || undefined;
            } else if (context.payload?.workflow_run?.pull_requests?.length) {
              prNumber = context.payload.workflow_run.pull_requests[0].number;
            }

            if (!prNumber) {
              console.log('No PR number available. For manual runs, pass pr_number via workflow_dispatch inputs.');
              return;
            }

            const { owner, repo } = context.repo;
            console.log(`Processing PR #${prNumber} in ${owner}/${repo}`);

            // Create comment
            const body = [
              `## ❌ Typecheck Failed`,
              '',
              'The workflow failed. Please run the following locally and fix all issues.',
              '',
              '```bash',
              'bunx nx affected -t typecheck --base=origin/master --head=HEAD',
              '```',
              '',
              'Make sure all checks pass locally before marking the PR as "Ready for review".'
            ].join('\n');

            try {
              await github.rest.issues.createComment({ 
                owner, 
                repo, 
                issue_number: prNumber, 
                body 
              });
              console.log(`✅ Comment created on PR #${prNumber}`);
            } catch (error) {
              console.log(`❌ Failed to create comment: ${error.message}`);
            }

            // Get current PR status
            let prData;
            try {
              const response = await github.rest.pulls.get({ 
                owner, 
                repo, 
                pull_number: prNumber 
              });
              prData = response.data;
            } catch (error) {
              console.log(`❌ Failed to get PR data: ${error.message}`);
              return;
            }

            if (prData.draft) {
              console.log('✅ PR is already a draft; nothing to do.');
              return;
            }

            // Convert to draft using REST API
            try {
              const response = await github.rest.pulls.update({ 
                owner, 
                repo, 
                pull_number: prNumber, 
                draft: true 
              });
              
              if (response.data.draft === true) {
                console.log('✅ PR successfully converted to draft via REST API');
              } else {
                console.log('⚠️  REST API call succeeded but draft status unclear');
              }
            } catch (error) {
              console.log(`❌ Failed to convert PR to draft: ${error.message}`);
              
              // Log additional context for debugging
              console.log('Error details:', {
                status: error.status,
                message: error.message,
                prNumber,
                currentDraftStatus: prData.draft
              });
            }
