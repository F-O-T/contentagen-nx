name: Label PRs Based on Conventional Commits

on:
  pull_request_target:
    branches: [master]
    types: [opened, synchronize, reopened]

jobs:
  label-by-title:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
    
    steps:
      - name: Label PR based on conventional commit title
        uses: actions/github-script@v7
        with:
          script: |
            const prTitle = context.payload.pull_request.title;
            const prNumber = context.payload.pull_request.number;
            
            const labels = [];
            
            // Check for conventional commit patterns
            const conventionalCommitMatch = prTitle.match(/^(\w+)(\(.+\))?:/);
            
            if (conventionalCommitMatch) {
              const type = conventionalCommitMatch[1].toLowerCase();
              
              // Map conventional commit types to labels
              switch (type) {
                case 'feat':
                  labels.push('feature', 'enhancement');
                  break;
                case 'fix':
                  labels.push('bug', 'fix');
                  break;
                case 'docs':
                  labels.push('documentation');
                  break;
                case 'style':
                  labels.push('style');
                  break;
                case 'refactor':
                  labels.push('refactor');
                  break;
                case 'test':
                  labels.push('test');
                  break;
                case 'chore':
                  labels.push('chore');
                  break;
                case 'perf':
                  labels.push('performance');
                  break;
                case 'ci':
                  labels.push('ci');
                  break;
                case 'build':
                  labels.push('build');
                  break;
                default:
                  // For unknown types, add a generic label
                  labels.push('needs-triage');
              }
            } else {
              // If title doesn't follow conventional commits, add triage label
              labels.push('needs-triage');
            }
            
            // Add size label based on files changed
            const filesChanged = context.payload.pull_request.changed_files;
            let sizeLabel = '';
            let sizeMessage = '';
            if (filesChanged <= 3) {
              sizeLabel = 'size/S';
              sizeMessage = 'This PR is small and should be quick to review.';
            } else if (filesChanged <= 10) {
              sizeLabel = 'size/M';
              sizeMessage = 'This PR is medium-sized and may need careful review.';
            } else if (filesChanged <= 25) {
              sizeLabel = 'size/L';
              sizeMessage = 'This PR is large and will require thorough review.';
            } else {
              sizeLabel = 'size/XL';
              sizeMessage = 'This PR is extra large and will require significant review time.';
            }
            labels.push(sizeLabel);
            
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: labels
              });
              
              // Leave a size context comment
              const comment = "PR Size Label: " + sizeLabel + "\n\n" + sizeMessage + "\n\nFiles changed: " + filesChanged;
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

