name: Check One Package Per Commit

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check-one-package-per-commit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for comparison

      - name: Get changed commits
        id: get-commits
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For PRs, get commits in the PR
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            COMMITS=$(git rev-list ${BASE_SHA}..${HEAD_SHA})
          else
            # For pushes, get commits in the push
            BASE_SHA="${{ github.event.before }}"
            HEAD_SHA="${{ github.event.after }}"
            COMMITS=$(git rev-list ${BASE_SHA}..${HEAD_SHA})
          fi

          if [ -z "$COMMITS" ]; then
            echo "No commits to check"
            exit 0
          fi

          echo "Checking commits:"
          echo "$COMMITS"
          echo "commit_count=$(echo "$COMMITS" | wc -l)" >> $GITHUB_OUTPUT

          # Save commits to file for next step
          echo "$COMMITS" > /tmp/commits.txt

      - name: Check each commit for one package rule
        id: check-commits
        run: |
          VIOLATIONS=0
          VIOLATION_DETAILS=""

          while read -r commit_sha; do
            if [ -z "$commit_sha" ]; then
              continue
            fi

            echo "Checking commit: $commit_sha"

            # Get changed files for this commit
            CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r $commit_sha)

            if [ -z "$CHANGED_FILES" ]; then
              continue
            fi

            echo "Changed files in commit $commit_sha:"
            echo "$CHANGED_FILES"

            # Determine which packages are affected
            PACKAGES_AFFECTED=""

            while read -r file; do
              if [ -z "$file" ]; then
                continue
              fi

              # Skip root level files and certain directories
              if [[ "$file" =~ ^(\\.github|\\.gitignore|package\.json|nx\.json|pnpm-lock\.yaml|bun\.lockb|README\.md) ]]; then
                continue
              fi

              # Extract package from file path
              if [[ "$file" =~ ^(apps/[^/]+)/ ]]; then
                PACKAGE="${BASH_REMATCH[1]}"
              elif [[ "$file" =~ ^(packages/[^/]+)/ ]]; then
                PACKAGE="${BASH_REMATCH[1]}"
              elif [[ "$file" =~ ^(tooling/[^/]+)/ ]]; then
                PACKAGE="${BASH_REMATCH[1]}"
              else
                # Root level or other files, consider them as affecting "root"
                PACKAGE="root"
              fi

              # Add to packages list if not already there
              if [[ ! "$PACKAGES_AFFECTED" =~ $PACKAGE ]]; then
                PACKAGES_AFFECTED="$PACKAGES_AFFECTED $PACKAGE"
              fi
            done <<< "$CHANGED_FILES"

            # Remove leading space
            PACKAGES_AFFECTED=$(echo "$PACKAGES_AFFECTED" | sed 's/^ *//')

            # Count packages (split by space)
            PACKAGE_COUNT=$(echo "$PACKAGES_AFFECTED" | wc -w)

            echo "Packages affected: $PACKAGES_AFFECTED (count: $PACKAGE_COUNT)"

            if [ "$PACKAGE_COUNT" -gt 1 ]; then
              VIOLATIONS=$((VIOLATIONS + 1))
              COMMIT_MESSAGE=$(git log --format=%B -n 1 $commit_sha)
              VIOLATION_DETAILS="${VIOLATION_DETAILS}Commit: $commit_sha
Message: $COMMIT_MESSAGE
Packages affected: $PACKAGES_AFFECTED
Files changed:
$CHANGED_FILES

---"
            fi
          done < /tmp/commits.txt

          echo "violations=$VIOLATIONS" >> $GITHUB_OUTPUT
          echo "violation_details<<EOF" >> $GITHUB_OUTPUT
          echo "$VIOLATION_DETAILS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Report violations
        if: steps.check-commits.outputs.violations > 0
        run: |
          echo "## ❌ One Package Per Commit Rule Violations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Found ${{ steps.check-commits.outputs.violations }} commit(s) that modify more than one package:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.check-commits.outputs.violation_details }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 How to fix:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Split your changes into separate commits, each affecting only one package" >> $GITHUB_STEP_SUMMARY
          echo "2. Use \`git rebase -i\` to edit your commits" >> $GITHUB_STEP_SUMMARY
          echo "3. Example of good commits:" >> $GITHUB_STEP_SUMMARY
          echo "   - \`feat(agents): add new workflow\`" >> $GITHUB_STEP_SUMMARY
          echo "   - \`fix(utils): update helper function\`" >> $GITHUB_STEP_SUMMARY
          echo "   - \`docs(landing-page): update homepage\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          exit 1

      - name: Success message
        if: steps.check-commits.outputs.violations == 0
        run: |
          echo "## ✅ All commits respect the one package per commit rule!" >> $GITHUB_STEP_SUMMARY