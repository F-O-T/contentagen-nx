name: Manage Automated Issues

on:
  schedule:
    # Run monthly on the 1st at 7 AM UTC
    - cron: '0 7 1 * *'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'cleanup'
        type: choice
        options:
          - cleanup
          - archive
          - report
          - close-resolved
      days_old:
        description: 'Close issues older than X days (default: 90)'
        required: false
        default: '90'
        type: string
      dry_run:
        description: 'Run in dry-run mode'
        required: false
        default: true
        type: boolean

jobs:
  manage-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Parse inputs
        id: parse-input
        run: |
          echo "action=${{ github.event.inputs.action || 'cleanup' }}" >> $GITHUB_OUTPUT
          echo "days_old=${{ github.event.inputs.days_old || '90' }}" >> $GITHUB_OUTPUT
          echo "dry_run=${{ github.event.inputs.dry_run || true }}" >> $GITHUB_OUTPUT

      - name: Manage automated issues
        uses: actions/github-script@v7
        with:
          script: |
            const action = '${{ steps.parse-input.outputs.action }}';
            const daysOld = parseInt('${{ steps.parse-input.outputs.days_old }}');
            const isDryRun = '${{ steps.parse-input.outputs.dry_run }}' === 'true';

            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - daysOld);

            console.log(`${isDryRun ? '🔍 DRY RUN: ' : ''}Managing automated issues...`);
            console.log(`Action: ${action}`);
            console.log(`Closing issues older than: ${cutoffDate.toISOString().split('T')[0]}`);

            // Get all automated issues
            const automatedIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'automated',
              state: 'open',
              per_page: 100
            });

            console.log(`Found ${automatedIssues.data.length} automated issues`);

            let closedCount = 0;
            let archivedCount = 0;
            const report = {
              total: automatedIssues.data.length,
              closed: 0,
              archived: 0,
              byType: {},
              byAge: {}
            };

            for (const issue of automatedIssues.data) {
              const createdDate = new Date(issue.created_at);
              const ageInDays = Math.floor((new Date() - createdDate) / (1000 * 60 * 60 * 24));

              // Categorize by type
              const typeLabel = issue.labels.find(label => !label.name.includes('automated') && !label.name.includes('priority'));
              const type = typeLabel ? typeLabel.name : 'unknown';
              report.byType[type] = (report.byType[type] || 0) + 1;

              // Categorize by age
              const ageCategory = ageInDays < 7 ? 'week' :
                                ageInDays < 30 ? 'month' :
                                ageInDays < 90 ? 'quarter' : 'old';
              report.byAge[ageCategory] = (report.byAge[ageCategory] || 0) + 1;

              if (action === 'report') {
                continue; // Just collect data for reporting
              }

              const shouldClose = createdDate < cutoffDate;
              const hasResolution = issue.body.includes('✅') || issue.body.includes('RESOLVED');

              if (shouldClose || hasResolution) {
                if (!isDryRun) {
                  if (action === 'close-resolved' && hasResolution) {
                    await github.rest.issues.update({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue.number,
                      state: 'closed',
                      state_reason: 'completed'
                    });
                    console.log(`✅ Closed resolved issue: #${issue.number} - ${issue.title}`);
                    closedCount++;
                  } else if (action === 'cleanup' && shouldClose) {
                    await github.rest.issues.update({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue.number,
                      state: 'closed',
                      state_reason: 'not_planned'
                    });
                    console.log(`🗂️ Closed old issue: #${issue.number} - ${issue.title}`);
                    closedCount++;
                  } else if (action === 'archive' && shouldClose) {
                    // Add archived label and close
                    await github.rest.issues.update({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue.number,
                      labels: [...issue.labels.map(l => l.name), 'archived'],
                      state: 'closed',
                      state_reason: 'not_planned'
                    });
                    console.log(`📦 Archived issue: #${issue.number} - ${issue.title}`);
                    archivedCount++;
                  }
                } else {
                  if (action === 'close-resolved' && hasResolution) {
                    console.log(`🔍 DRY RUN: Would close resolved issue: #${issue.number} - ${issue.title}`);
                    closedCount++;
                  } else if ((action === 'cleanup' || action === 'archive') && shouldClose) {
                    console.log(`🔍 DRY RUN: Would ${action} old issue: #${issue.number} - ${issue.title} (${ageInDays} days old)`);
                    if (action === 'archive') archivedCount++;
                    else closedCount++;
                  }
                }
              }
            }

            report.closed = closedCount;
            report.archived = archivedCount;

            // Create or update management report
            const reportTitle = `📊 Automated Issues Management Report - ${new Date().toISOString().split('T')[0]}`;
            const reportBody = `## 📊 Automated Issues Management Report

            **Report Date:** ${new Date().toISOString().split('T')[0]}
            **Action Performed:** ${action}
            **Dry Run:** ${isDryRun ? 'Yes' : 'No'}

            ### 📈 Summary
            - **Total Automated Issues:** ${report.total}
            - **Issues ${action === 'archive' ? 'Archived' : 'Closed'}:** ${closedCount + archivedCount}
            - **Cutoff Date:** ${cutoffDate.toISOString().split('T')[0]} (${daysOld} days ago)

            ### 📋 Issues by Type
            ${Object.entries(report.byType).map(([type, count]) =>
              `- **${type}:** ${count} issues`
            ).join('\n')}

            ### 📅 Issues by Age
            - **This week:** ${report.byAge.week || 0} issues
            - **This month:** ${report.byAge.month || 0} issues
            - **This quarter:** ${report.byAge.quarter || 0} issues
            - **Older:** ${report.byAge.old || 0} issues

            ### 🎯 Actions Taken
            ${closedCount > 0 ? `- ✅ Closed ${closedCount} issues` : '- No issues were closed'}
            ${archivedCount > 0 ? `- 📦 Archived ${archivedCount} issues` : ''}

            ### 📝 Recommendations
            - Consider reviewing closed issues periodically to ensure they stay resolved
            - Set up automated reminders for high-priority automated issues
            - Regularly audit the effectiveness of automated issue creation

            ---
            *This report was generated automatically by the issue management workflow.*
            `;

            if (action === 'report' || !isDryRun) {
              // Check if report issue exists
              const existingReports = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['report', 'automated', 'management'],
                state: 'open'
              });

              if (existingReports.data.length > 0) {
                // Update existing report
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingReports.data[0].number,
                  title: reportTitle,
                  body: reportBody
                });
                console.log(`Updated management report: #${existingReports.data[0].number}`);
              } else {
                // Create new report
                const reportIssue = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: reportTitle,
                  body: reportBody,
                  labels: ['report', 'automated', 'management']
                });
                console.log(`Created management report: ${reportIssue.data.html_url}`);
              }
            }

            console.log(`Management complete. ${isDryRun ? 'DRY RUN - ' : ''}Processed ${report.total} issues.`);