name: PR Comment & Convert to Draft on Typecheck Failure


on:
  workflow_run:
    workflows:
      - "Typecheck"
      - "Tests"
      - "Biome Check"
    types:
      - completed
  workflow_dispatch:
    inputs:
      pr_number:
        description: '(for manual testing) PR number to act on'
        required: false
        type: number

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  comment-and-draft:
    if: ${{ (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'failure') || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Comment on PR and ensure draft (safe base-repo run)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Determine PR number:
            let prNumber = undefined;
            if (context.eventName === 'workflow_dispatch') {
              prNumber = parseInt(process.env.INPUT_PR_NUMBER || '', 10) || undefined;
            } else if (context.payload && context.payload.workflow_run && Array.isArray(context.payload.workflow_run.pull_requests) && context.payload.workflow_run.pull_requests.length) {
              prNumber = context.payload.workflow_run.pull_requests[0].number;
            }

            if (!prNumber) {
              console.log('No PR number available. For manual runs, pass pr_number via workflow_dispatch inputs.');
              return;
            }

            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const body = [
              `## ‚ùå Typecheck Failed`,
              '',
              'The workflow failed. Please run the following locally and fix all issues.',
              '',
              '```bash',
              'bunx nx affected -t typecheck --base=origin/master --head=HEAD',
              '```',
              '',
              'Make sure all checks pass locally before marking the PR as "Ready for review".'
            ].join('\n');

            // Create a comment
            await github.rest.issues.createComment({ owner, repo, issue_number: prNumber, body });
            console.log(`Comment created on PR #${prNumber}`);

            // Get PR via REST
            const { data: prData } = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });
            if (prData.draft) {
              console.log('PR already draft; nothing to do.');
              return;
            }

            // Try REST update first
            try {
              const res = await github.rest.pulls.update({ owner, repo, pull_number: prNumber, draft: true });
              if (res && res.data && res.data.draft === true) {
                console.log('PR converted to draft via REST.');
                return;
              }
              console.log('REST update did not set draft to true; attempting GraphQL fallback.');
            } catch (err) {
              console.log('REST update failed; attempting GraphQL fallback.');
            }

            // GraphQL fallback
            if (prData.node_id) {
              try {
                const mutation = `
                  mutation ConvertToDraft($id: ID!) {
                    convertPullRequestToDraft(input: { pullRequestId: $id }) {
                      pullRequest { number isDraft }
                    }
                  }
                `;
                const gqlRes = await github.graphql(mutation, { id: prData.node_id });
                const converted = gqlRes && gqlRes.convertPullRequestToDraft && gqlRes.convertPullRequestToDraft.pullRequest && gqlRes.convertPullRequestToDraft.pullRequest.isDraft;
                if (converted === true) {
                  console.log('PR converted to draft via GraphQL.');
                  return;
                }
                console.log('GraphQL did not set isDraft true.');
              } catch (err) {
                console.log('GraphQL convertPullRequestToDraft failed:', err && err.message ? err.message : err);
              }
            } else {
              console.log('PR node_id unavailable; cannot run GraphQL fallback.');
            }

            console.log('Unable to mark PR as draft via REST or GraphQL.');
