name: Create Issues from Code Comments

on:
  push:
    branches: [main, master]
  pull_request:
    types: [opened, synchronize]
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of scan to perform'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - todos
          - fixmes
          - hacks
          - notes

jobs:
  scan-code-comments:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Scan for TODO comments
        id: scan-todos
        if: ${{ github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'todos' || github.event_name != 'workflow_dispatch' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Scan for TODO comments in code files
            const scanDirectory = (dir, results = []) => {
              const items = fs.readdirSync(dir);

              for (const item of items) {
                const fullPath = path.join(dir, item);
                const stat = fs.statSync(fullPath);

                if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules' && item !== 'dist' && item !== 'build') {
                  scanDirectory(fullPath, results);
                } else if (stat.isFile() && /\.(js|ts|tsx|jsx|py|java|cpp|c|php|rb|go|rs)$/.test(item)) {
                  const content = fs.readFileSync(fullPath, 'utf8');
                  const lines = content.split('\n');

                  lines.forEach((line, index) => {
                    const todoMatch = line.match(/(?:\/\/|#|\/\*|\*)\s*(TODO|FIXME|HACK|NOTE|BUG):\s*(.+)/i);
                    if (todoMatch) {
                      results.push({
                        file: fullPath.replace(process.cwd() + '/', ''),
                        line: index + 1,
                        type: todoMatch[1].toUpperCase(),
                        comment: todoMatch[2].trim(),
                        fullLine: line.trim()
                      });
                    }
                  });
                }
              }

              return results;
            };

            const todos = scanDirectory('.');
            console.log(`Found ${todos.length} TODO/FIXME comments`);

            // Group by type
            const grouped = todos.reduce((acc, todo) => {
              if (!acc[todo.type]) acc[todo.type] = [];
              acc[todo.type].push(todo);
              return acc;
            }, {});

            return grouped;

      - name: Create TODO issues
        if: ${{ steps.scan-todos.outputs.result != '{}' }}
        uses: actions/github-script@v7
        with:
          script: |
            const todos = ${{ steps.scan-todos.outputs.result }};
            const createdIssues = [];

            for (const [type, items] of Object.entries(todos)) {
              if (items.length === 0) continue;

              // Check if issue already exists for this type
              const existingIssues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['automated', 'code-comments', type.toLowerCase()],
                state: 'open'
              });

              if (existingIssues.data.length > 0) {
                console.log(`Issue already exists for ${type} comments`);
                continue;
              }

              // Create issue for this type
              const issueBody = `## 📝 ${type} Comments Found in Codebase

              **Scan Type:** ${type}
              **Total Comments:** ${items.length}
              **Last Updated:** ${new Date().toISOString().split('T')[0]}

              ### ${type} Items Found:

              ${items.map(item => `#### ${item.file}:${item.line}
              \`\`\`
              ${item.fullLine}
              \`\`\`
              **Comment:** ${item.comment}

              `).join('\n')}

              ### Next Steps:
              1. Review each ${type.toLowerCase()} comment
              2. Create individual issues for complex items
              3. Address high-priority items first
              4. Update or remove resolved comments

              ---
              *This issue was automatically created by scanning the codebase for ${type} comments.*
              `;

              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `📝 Address ${type} Comments (${items.length} items)`,
                body: issueBody,
                labels: ['automated', 'code-comments', type.toLowerCase(), 'maintenance']
              });

              createdIssues.push(issue.data.html_url);
              console.log(`Created issue: ${issue.data.html_url}`);
            }

            if (createdIssues.length > 0) {
              console.log(`Created ${createdIssues.length} issues:`, createdIssues);
            }