name: Create Dependency Update Issues

on:
  schedule:
    # Run weekly on Wednesdays at 10 AM UTC
    - cron: '0 10 * * 3'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of dependency check'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - security
          - outdated
          - major-updates

jobs:
  check-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for security vulnerabilities
        id: security-check
        if: ${{ github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'security' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "Running security audit..."
          npm audit --audit-level=moderate --json > security-audit.json || true
          echo "audit_complete=true" >> $GITHUB_OUTPUT

      - name: Check for outdated packages
        id: outdated-check
        if: ${{ github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'outdated' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "Checking for outdated packages..."
          npm outdated --json > outdated-packages.json || echo "{}" > outdated-packages.json
          echo "outdated_complete=true" >> $GITHUB_OUTPUT

      - name: Create security vulnerability issues
        if: ${{ steps.security-check.outputs.audit_complete == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            if (!fs.existsSync('security-audit.json')) {
              console.log('No security audit file found');
              return;
            }

            const auditData = JSON.parse(fs.readFileSync('security-audit.json', 'utf8'));

            if (!auditData.vulnerabilities || Object.keys(auditData.vulnerabilities).length === 0) {
              console.log('No security vulnerabilities found');
              return;
            }

            const vulnerabilities = Object.values(auditData.vulnerabilities);
            const highSeverity = vulnerabilities.filter(v => v.severity === 'high');
            const moderateSeverity = vulnerabilities.filter(v => v.severity === 'moderate');

            // Check if security issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['security', 'dependencies', 'automated'],
              state: 'open'
            });

            if (existingIssues.data.length > 0) {
              console.log('Security issue already exists');
              return;
            }

            const issueBody = `## ğŸ”’ Security Vulnerabilities Found

            **Total Vulnerabilities:** ${vulnerabilities.length}
            **High Severity:** ${highSeverity.length}
            **Moderate Severity:** ${moderateSeverity.length}
            **Last Updated:** ${new Date().toISOString().split('T')[0]}

            ### High Severity Issues:
            ${highSeverity.length > 0 ? highSeverity.map(v => `
            #### ${v.name}@${v.range}
            - **Severity:** ${v.severity}
            - **Title:** ${v.title}
            - **URL:** ${v.url || 'N/A'}
            - **Recommendation:** Update to ${v.fixAvailable ? v.fixAvailable.version : 'latest version'}
            `).join('\n') : '*No high severity issues found*'}

            ### Moderate Severity Issues:
            ${moderateSeverity.length > 0 ? moderateSeverity.slice(0, 10).map(v => `
            #### ${v.name}@${v.range}
            - **Severity:** ${v.severity}
            - **Title:** ${v.title}
            - **URL:** ${v.url || 'N/A'}
            `).join('\n') : '*No moderate severity issues found*'}

            ${moderateSeverity.length > 10 ? `\n*... and ${moderateSeverity.length - 10} more moderate severity issues*` : ''}

            ### Next Steps:
            1. Review all high severity vulnerabilities immediately
            2. Update affected packages to secure versions
            3. Test thoroughly after updates
            4. Consider pinning vulnerable packages if updates aren't available

            ### Commands to run:
            \`\`\`bash
            npm audit fix
            npm audit
            \`\`\`

            ---
            *This issue was automatically created by the dependency security check.*
            `;

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ğŸ”’ Security Vulnerabilities: ${highSeverity.length} High, ${moderateSeverity.length} Moderate`,
              body: issueBody,
              labels: ['security', 'dependencies', 'automated', highSeverity.length > 0 ? 'critical' : 'high']
            });

            console.log(`Created security issue: ${issue.data.html_url}`);

      - name: Create outdated packages issue
        if: ${{ steps.outdated-check.outputs.outdated_complete == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            if (!fs.existsSync('outdated-packages.json')) {
              console.log('No outdated packages file found');
              return;
            }

            const outdatedData = JSON.parse(fs.readFileSync('outdated-packages.json', 'utf8'));

            if (Object.keys(outdatedData).length === 0) {
              console.log('No outdated packages found');
              return;
            }

            const packages = Object.entries(outdatedData);
            const majorUpdates = packages.filter(([name, info]) => {
              const current = info.current.split('.');
              const latest = info.latest.split('.');
              return parseInt(current[0]) < parseInt(latest[0]);
            });

            // Check if outdated issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['dependencies', 'outdated', 'automated'],
              state: 'open'
            });

            if (existingIssues.data.length > 0) {
              console.log('Outdated packages issue already exists');
              return;
            }

            const issueBody = `## ğŸ“¦ Outdated Dependencies

            **Total Outdated Packages:** ${packages.length}
            **Major Version Updates:** ${majorUpdates.length}
            **Last Updated:** ${new Date().toISOString().split('T')[0]}

            ### Major Version Updates (High Priority):
            ${majorUpdates.length > 0 ? majorUpdates.map(([name, info]) => `
            #### ${name}
            - **Current:** ${info.current}
            - **Latest:** ${info.latest}
            - **Type:** Major update (may include breaking changes)
            `).join('\n') : '*No major updates available*'}

            ### All Outdated Packages:
            ${packages.slice(0, 20).map(([name, info]) => `
            #### ${name}
            - **Current:** ${info.current}
            - **Latest:** ${info.latest}
            - **Wanted:** ${info.wanted}
            `).join('\n')}

            ${packages.length > 20 ? `\n*... and ${packages.length - 20} more packages*` : ''}

            ### Next Steps:
            1. Review major version updates carefully (may have breaking changes)
            2. Update packages incrementally, testing after each update
            3. Update package.json and lock files
            4. Run tests after updates
            5. Consider creating separate issues for major updates

            ### Commands to run:
            \`\`\`bash
            npm update
            npm outdated
            \`\`\`

            ---
            *This issue was automatically created by the dependency update check.*
            `;

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ğŸ“¦ Update Dependencies (${packages.length} outdated, ${majorUpdates.length} major)`,
              body: issueBody,
              labels: ['dependencies', 'outdated', 'automated', majorUpdates.length > 0 ? 'high' : 'medium']
            });

            console.log(`Created outdated packages issue: ${issue.data.html_url}`);