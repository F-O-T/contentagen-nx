name: Create Code Quality Issues

on:
  schedule:
    # Run weekly on Tuesdays at 9 AM UTC
    - cron: '0 9 * * 2'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of code quality check'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - linting
          - complexity
          - duplication
          - formatting

jobs:
  code-quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        id: linting
        if: ${{ github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'linting' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "Running linting checks..."

          # Run linting and capture output
          npm run lint 2>&1 | tee lint-output.txt || true

          # Count linting errors and warnings
          ERRORS=$(grep -c "error" lint-output.txt 2>/dev/null || echo "0")
          WARNINGS=$(grep -c "warning" lint-output.txt 2>/dev/null || echo "0")

          echo "lint_errors=$ERRORS" >> $GITHUB_OUTPUT
          echo "lint_warnings=$WARNINGS" >> $GITHUB_OUTPUT
          echo "linting_complete=true" >> $GITHUB_OUTPUT

      - name: Check code complexity
        id: complexity
        if: ${{ github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'complexity' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "Analyzing code complexity..."

          # Find complex functions (simple heuristic: functions with many lines or parameters)
          COMPLEX_FUNCTIONS=$(grep -r "function\|=>" --include="*.js" --include="*.ts" --include="*.tsx" src/ | wc -l)
          LONG_FILES=$(find src/ -name "*.js" -o -name "*.ts" -o -name "*.tsx" | xargs wc -l | awk '$1 > 300 {count++} END {print count+0}')
          DEEP_NESTING=$(grep -r "if.*if\|for.*for\|while.*while" --include="*.js" --include="*.ts" --include="*.tsx" src/ | wc -l)

          echo "complex_functions=$COMPLEX_FUNCTIONS" >> $GITHUB_OUTPUT
          echo "long_files=$LONG_FILES" >> $GITHUB_OUTPUT
          echo "deep_nesting=$DEEP_NESTING" >> $GITHUB_OUTPUT
          echo "complexity_complete=true" >> $GITHUB_OUTPUT

      - name: Check code duplication
        id: duplication
        if: ${{ github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'duplication' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "Checking for code duplication..."

          # Simple duplication check (lines that appear more than once)
          DUPLICATE_LINES=$(sort src/**/*.{js,ts,tsx} 2>/dev/null | uniq -d | wc -l 2>/dev/null || echo "0")

          # Check for similar function names
          SIMILAR_FUNCTIONS=$(grep -r "^\s*function\|^\s*const.*=" --include="*.js" --include="*.ts" --include="*.tsx" src/ | sed 's/.*function \([a-zA-Z_][a-zA-Z0-9_]*\).*/\1/' | sed 's/.*const \([a-zA-Z_][a-zA-Z0-9_]*\).*/\1/' | sort | uniq -c | awk '$1 > 1 {count++} END {print count+0}')

          echo "duplicate_lines=$DUPLICATE_LINES" >> $GITHUB_OUTPUT
          echo "similar_functions=$SIMILAR_FUNCTIONS" >> $GITHUB_OUTPUT
          echo "duplication_complete=true" >> $GITHUB_OUTPUT

      - name: Check formatting
        id: formatting
        if: ${{ github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'formatting' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "Checking code formatting..."

          # Check if prettier is available and run it
          if npm list prettier > /dev/null 2>&1; then
            npx prettier --check "src/**/*.{js,ts,tsx,json,md}" 2>&1 | tee format-output.txt || true
            UNFORMATTED_FILES=$(grep -c "prettier --write" format-output.txt 2>/dev/null || echo "0")
          else
            UNFORMATTED_FILES="0"
          fi

          # Check for inconsistent indentation
          MIXED_SPACES=$(grep -r "^  " --include="*.js" --include="*.ts" --include="*.tsx" src/ | grep -c "\t" 2>/dev/null || echo "0")

          echo "unformatted_files=$UNFORMATTED_FILES" >> $GITHUB_OUTPUT
          echo "mixed_indentation=$MIXED_SPACES" >> $GITHUB_OUTPUT
          echo "formatting_complete=true" >> $GITHUB_OUTPUT

      - name: Create linting issues
        if: ${{ steps.linting.outputs.linting_complete == 'true' && (steps.linting.outputs.lint_errors != '0' || steps.linting.outputs.lint_warnings != '0') }}
        uses: actions/github-script@v7
        with:
          script: |
            const lintErrors = parseInt('${{ steps.linting.outputs.lint_errors }}');
            const lintWarnings = parseInt('${{ steps.linting.outputs.lint_warnings }}');

            if (lintErrors === 0 && lintWarnings === 0) {
              console.log('No linting issues found');
              return;
            }

            // Check if linting issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['linting', 'automated'],
              state: 'open'
            });

            if (existingIssues.data.length > 0) {
              console.log('Linting issue already exists');
              return;
            }

            const issueBody = `## ðŸ§¹ Linting Issues Found

            **Linting Errors:** ${lintErrors}
            **Linting Warnings:** ${lintWarnings}
            **Last Updated:** ${new Date().toISOString().split('T')[0]}

            ### Issues Summary:
            ${lintErrors > 0 ? `ðŸ”´ **Errors:** ${lintErrors} critical issues that need immediate attention` : ''}
            ${lintWarnings > 0 ? `ðŸŸ¡ **Warnings:** ${lintWarnings} issues that should be addressed` : ''}

            ### Common Linting Issues:
            - **ESLint errors:** Syntax errors, undefined variables, unused imports
            - **TypeScript errors:** Type mismatches, missing type annotations
            - **Code style violations:** Inconsistent formatting, naming conventions

            ### Next Steps:
            1. Review the linting output for specific errors
            2. Fix critical errors first (blocking issues)
            3. Address warnings to improve code quality
            4. Consider adding linting rules to CI/CD pipeline
            5. Set up pre-commit hooks for automatic linting

            ### Commands to run:
            \`\`\`bash
            npm run lint
            npm run lint:fix  # if available
            \`\`\`

            ### Linting Configuration:
            Based on your project, you might want to:
            - Configure ESLint rules in \`.eslintrc.js\`
            - Set up Prettier for consistent formatting
            - Add lint-staged for pre-commit checks
            - Configure VS Code settings for automatic linting

            ---
            *This issue was automatically created by the linting analysis.*
            `;

            const priority = lintErrors > 0 ? 'high' : 'medium';
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸ§¹ Fix Linting Issues (${lintErrors} errors, ${lintWarnings} warnings)`,
              body: issueBody,
              labels: ['linting', 'automated', 'enhancement', priority]
            });

            console.log(`Created linting issue: ${issue.data.html_url}`);

      - name: Create code complexity issue
        if: ${{ steps.complexity.outputs.complexity_complete == 'true' && (steps.complexity.outputs.long_files != '0' || steps.complexity.outputs.deep_nesting != '0') }}
        uses: actions/github-script@v7
        with:
          script: |
            const longFiles = parseInt('${{ steps.complexity.outputs.long_files }}');
            const deepNesting = parseInt('${{ steps.complexity.outputs.deep_nesting }}');

            if (longFiles === 0 && deepNesting === 0) {
              console.log('No code complexity issues found');
              return;
            }

            // Check if complexity issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['code-complexity', 'automated'],
              state: 'open'
            });

            if (existingIssues.data.length > 0) {
              console.log('Code complexity issue already exists');
              return;
            }

            const issueBody = `## ðŸ§© Code Complexity Issues

            **Long Files (>300 lines):** ${longFiles}
            **Deep Nesting Issues:** ${deepNesting}
            **Last Updated:** ${new Date().toISOString().split('T')[0]}

            ### Complexity Issues Found:
            - **Long Files:** ${longFiles} files exceed 300 lines (recommended max)
            - **Deep Nesting:** ${deepNesting} instances of nested control structures

            ### Why This Matters:
            1. **Maintainability:** Complex code is harder to understand and modify
            2. **Bug Risk:** More complex code has higher chance of bugs
            3. **Testing:** Complex functions are harder to test thoroughly
            4. **Performance:** Deep nesting can impact performance
            5. **Code Reviews:** Large files are harder to review effectively

            ### Refactoring Strategies:
            1. **Extract Functions:** Break large functions into smaller, focused functions
            2. **Extract Components:** Split large components into smaller ones
            3. **Early Returns:** Use early returns to reduce nesting
            4. **Guard Clauses:** Replace nested ifs with guard clauses
            5. **Strategy Pattern:** Extract complex conditional logic
            6. **Factory Pattern:** Create objects instead of complex constructors

            ### Next Steps:
            1. Identify the most complex files and functions
            2. Break them down into smaller, focused units
            3. Ensure each function has a single responsibility
            4. Add comprehensive tests for refactored code
            5. Consider using complexity analysis tools

            ### Tools to help:
            - **ESLint complexity rule:** \`complexity: ["error", 10]\`
            - **CodeClimate:** Automated code quality analysis
            - **SonarQube:** Comprehensive code quality platform
            - **VS Code extensions:** CodeMetrics, CodeStream

            ---
            *This issue was automatically created by the code complexity analysis.*
            `;

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸ§© Refactor Complex Code (${longFiles} long files, ${deepNesting} nesting issues)`,
              body: issueBody,
              labels: ['code-complexity', 'automated', 'refactor']
            });

            console.log(`Created complexity issue: ${issue.data.html_url}`);

      - name: Create code duplication issue
        if: ${{ steps.duplication.outputs.duplication_complete == 'true' && (steps.duplication.outputs.duplicate_lines != '0' || steps.duplication.outputs.similar_functions != '0') }}
        uses: actions/github-script@v7
        with:
          script: |
            const duplicateLines = parseInt('${{ steps.duplication.outputs.duplicate_lines }}');
            const similarFunctions = parseInt('${{ steps.duplication.outputs.similar_functions }}');

            if (duplicateLines === 0 && similarFunctions === 0) {
              console.log('No code duplication issues found');
              return;
            }

            // Check if duplication issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['code-duplication', 'automated'],
              state: 'open'
            });

            if (existingIssues.data.length > 0) {
              console.log('Code duplication issue already exists');
              return;
            }

            const issueBody = `## ðŸ“‹ Code Duplication Issues

            **Duplicate Lines:** ${duplicateLines}
            **Similar Functions:** ${similarFunctions}
            **Last Updated:** ${new Date().toISOString().split('T')[0]}

            ### Duplication Issues Found:
            - **Duplicate Code Lines:** ${duplicateLines} lines appear multiple times
            - **Similar Function Names:** ${similarFunctions} functions with similar names

            ### Why Duplication is Problematic:
            1. **Maintenance:** Changes need to be made in multiple places
            2. **Bug Risk:** Fixes in one place might be missed elsewhere
            3. **Code Size:** Increases bundle size unnecessarily
            4. **Readability:** Makes codebase harder to understand
            5. **Testing:** Duplicate code needs duplicate tests

            ### Solutions for Code Duplication:
            1. **Extract Common Functions:** Create shared utility functions
            2. **Create Base Components:** Extract common component logic
            3. **Use Custom Hooks:** Share stateful logic between components
            4. **Implement Mixins/Composition:** Combine shared functionality
            5. **Create Shared Constants:** Extract magic numbers/strings
            6. **Use Configuration Objects:** Replace similar conditional logic

            ### Next Steps:
            1. Identify the most duplicated code patterns
            2. Extract common functionality into shared modules
            3. Update all usages to use the shared code
            4. Ensure tests cover the shared functionality
            5. Consider using duplication detection tools

            ### Tools to help:
            - **jscpd:** JavaScript copy-paste detector
            - **ESLint import plugin:** Detect duplicate imports
            - **SonarQube:** Advanced duplication detection
            - **VS Code extensions:** Duplicate code detection

            ### Example Refactoring:
            \`\`\`typescript
            // Instead of duplicating this logic:
            const formatDate = (date) => {
              return new Date(date).toLocaleDateString();
            };

            // Create a shared utility:
            export const formatDate = (date: Date): string => {
              return date.toLocaleDateString();
            };
            \`\`\`

            ---
            *This issue was automatically created by the code duplication analysis.*
            `;

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸ“‹ Remove Code Duplication (${duplicateLines} duplicate lines, ${similarFunctions} similar functions)`,
              body: issueBody,
              labels: ['code-duplication', 'automated', 'refactor']
            });

            console.log(`Created duplication issue: ${issue.data.html_url}`);

      - name: Create formatting issue
        if: ${{ steps.formatting.outputs.formatting_complete == 'true' && (steps.formatting.outputs.unformatted_files != '0' || steps.formatting.outputs.mixed_indentation != '0') }}
        uses: actions/github-script@v7
        with:
          script: |
            const unformattedFiles = parseInt('${{ steps.formatting.outputs.unformatted_files }}');
            const mixedIndentation = parseInt('${{ steps.formatting.outputs.mixed_indentation }}');

            if (unformattedFiles === 0 && mixedIndentation === 0) {
              console.log('No formatting issues found');
              return;
            }

            // Check if formatting issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['formatting', 'automated'],
              state: 'open'
            });

            if (existingIssues.data.length > 0) {
              console.log('Formatting issue already exists');
              return;
            }

            const issueBody = `## ðŸŽ¨ Code Formatting Issues

            **Unformatted Files:** ${unformattedFiles}
            **Mixed Indentation:** ${mixedIndentation}
            **Last Updated:** ${new Date().toISOString().split('T')[0]}

            ### Formatting Issues Found:
            - **Unformatted Files:** ${unformattedFiles} files don't match formatting standards
            - **Mixed Indentation:** ${mixedIndentation} files use inconsistent indentation

            ### Why Consistent Formatting Matters:
            1. **Readability:** Consistent code is easier to read and understand
            2. **Team Collaboration:** Reduces merge conflicts from formatting changes
            3. **Code Reviews:** Focus on logic rather than style differences
            4. **Professionalism:** Consistent style looks more professional
            5. **Tool Integration:** Better integration with IDEs and editors

            ### Recommended Tools:
            1. **Prettier:** Automatic code formatting
            2. **EditorConfig:** Consistent editor settings across team
            3. **ESLint:** Code style and error checking
            4. **Pre-commit hooks:** Automatic formatting before commits
            5. **CI/CD checks:** Fail builds on formatting issues

            ### Next Steps:
            1. Set up Prettier configuration
            2. Configure EditorConfig for your project
            3. Add formatting scripts to package.json
            4. Set up pre-commit hooks with husky
            5. Configure VS Code workspace settings

            ### Configuration Files to Add:
            \`\`\`json
            // .prettierrc
            {
              "semi": true,
              "trailingComma": "es5",
              "singleQuote": true,
              "printWidth": 80,
              "tabWidth": 2,
              "useTabs": false
            }
            \`\`\`

            \`\`\`ini
            # .editorconfig
            root = true

            [*]
            indent_style = space
            indent_size = 2
            end_of_line = lf
            charset = utf-8
            trim_trailing_whitespace = true
            insert_final_newline = true
            \`\`\`

            ### Commands to run:
            \`\`\`bash
            npx prettier --write "src/**/*.{js,ts,tsx,json,md}"
            npx prettier --check "src/**/*.{js,ts,tsx,json,md}"
            \`\`\`

            ---
            *This issue was automatically created by the code formatting analysis.*
            `;

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸŽ¨ Fix Code Formatting (${unformattedFiles} unformatted files, ${mixedIndentation} mixed indentation)`,
              body: issueBody,
              labels: ['formatting', 'automated', 'enhancement']
            });

            console.log(`Created formatting issue: ${issue.data.html_url}`);