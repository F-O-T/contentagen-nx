name: Label PRs Based on Issue Template

on:
  pull_request:
    branches: ["*"]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  label-by-issue:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
    
    steps:
      - name: Check if PR references an issue
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const prNumber = pr.number;
            
            // Check if PR body contains issue references
            const prBody = pr.body || '';
            const issueRefs = prBody.match(/#(\d+)/g);
            
            if (issueRefs) {
              // Get the first referenced issue
              const issueNumber = parseInt(issueRefs[0].substring(1));
              
              try {
                const issue = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
                
                const issueTitle = issue.data.title;
                const issueLabels = issue.data.labels || [];
                const labels = [];
                
                // Add labels based on issue template patterns in title
                if (issueTitle.startsWith('[MEGA]')) {
                  labels.push('mega-issue', 'epic', 'type: epic');
                } else if (issueTitle.startsWith('[FEATURE]')) {
                  labels.push('enhancement', 'feature', 'type: feature');
                } else if (issueTitle.startsWith('[BUG]')) {
                  labels.push('bug', 'type: bug');
                } else if (issueTitle.startsWith('[DOCS]')) {
                  labels.push('documentation', 'type: docs');
                } else if (issueTitle.startsWith('[TASK]')) {
                  labels.push('task', 'type: task');
                }
                
                // Also check existing labels for patterns
                issueLabels.forEach(label => {
                  const name = typeof label === 'string' ? label : label.name;
                  if (name === 'mega-issue') labels.push('mega-issue');
                  if (name === 'enhancement') labels.push('enhancement');
                  if (name === 'bug') labels.push('bug');
                  if (name === 'documentation') labels.push('documentation');
                  if (name === 'test') labels.push('test');
                  if (name && name.startsWith('type:')) labels.push(name);
                });
                
                // Remove duplicates
                const uniqueLabels = [...new Set(labels)];
                
                if (uniqueLabels.length > 0) {
                  await github.rest.issues.addLabels({
                    issue_number: prNumber,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    labels: uniqueLabels
                  });
                }
              } catch (error) {
                console.log('Could not fetch issue:', error.message);
              }
            }

